우테코 3주차 소감문

이번 주차에는 도메인 로직 및 UI 분리, 피드백의 ‘값을 하드코딩을 하지 마라’ 에서 배울 점이 많았고 저 스스로의 고민들로 성장할 수 있었습니다.

도메인 로직이라는 개념을 처음 들어봤었는데 찾아보니 여태 프리코스를 도메인 로직 중심으로 코딩을 해오고 있었다는 것을 깨달았습니다. 핵심이 되는 객체안에 그에 따른 기능들을 넣는 방식입니다. 스프링을 잠깐 다루었던 적이 있었는데 그때에는 domain이라는 패키지 안에 Getter Setter가 있는 단순 객체들만을 넣고 service 패키지안에서 비즈니스 로직을 구성하였습니다. 그런데 도메인 로직은 객체들안에 핵심 비즈니스 로직이 있다고 하였습니다. 저는 궁금해져 무엇이 정답인지 찾아보았습니다. 그 결과 정답은 없고 도메인 로직을 중심으로 짜면 DDD라는 도메인 중심 개발이고, service 패키지안에서 핵심 로직을 구성하는 것은 스프링 4계층 구조를 이용한 것이었습니다.
이 개념을 학습하고 개발에 들어갔습니다. UI를 어떻게 분리할지 막막했지만 우선 ‘핵심’비즈니스 로직인 도메인을 작성하였습니다. 핵심 로직을 구성하니 UI에 어떤 값들이 필요한지 보이기 시작했습니다. 그런 UI와 도메인을 연결시키기 위한 클래스도 필요하게 되었습니다 개발을 하다 제가 MVC 패턴을 구사하고 있다는 사실을 알게 되었습니다. MVC 패턴을 스프링에서 경험해 본적이 있었습니다. 커뮤니티 내에서 이런 콘솔 미션에서 MVC 구현을 한다고 하였는데 어찌 가능한지 이해가 되지 않았습니다. 하지만 후에 차근차근 미션을 하다 보니 자연스럽게 MVC를 구현하게 된 저를 보며 신기했습니다. domain에는 핵심 비즈니스 로직, Program(Controller)에는 비즈니스 로직과 UI의 연결, UI(View)에는 입출력 기능만 담당할 수 있도록 하였습니다.

두번째로 ‘값을 하드코딩을 하지 마라’ 입니다. 공통 피드백에 있던 내용입니다. 원래 자바 상수에 대한 개념은 알고 있었지만 이것을 적용해 보는 계기가 되었습니다. 이것을 적용하고 원래 있던 코드와 비교해 보니 확실히 가독성이 올라갔습니다. 또한 상수를 적용하는 것이 시간이 오래 걸리는 작업도 아니었습니다. 유용하게 사용할 수 있겠다는 생각을 하였습니다.

이번 미션은 저번 미션들과는 전략을 다르게 가져갔습니다. ‘고민하는 시간을 줄이고 우선 개발을 진행한 다음에 수정을 진행하자’ 라는 전략이었습니다. 확실히 개발하는 속도는 굉장히 빨랐습니다. 눈에 보이는 기능 요구사항은 빠르게 만족할 수 있었습니다. 근데 그에 따른 부작용이 있었습니다. 후에 리팩토링을 하는데에 시간이 너무 오래 걸린다는 점이었습니다. 또한 커밋 내용이 너무 부산하다는 단점도 있었습니다. 고민을 오래하는 것과 적게 하는 것에는 서로 장단점이 있다고 생각하였습니다. 하지만 이런 빠른 개발은 협업을 한다면 단점이 될 수 있겠다는 생각, 프로젝트가 커지면 무작정 개발을 하는 것은 위험하겠다는 생각을 하였습니다. 따라서 고민시간의 적정선을 잘 조율해서 해야겠다는 생각을 하였습니다.

기능 개발을 끝내고 고민들 즉 궁금점을 풀어내려고 노력하였습니다. 코딩을 하다 보면 매 순간떠오릅니다. ‘커밋 컨벤션의 경우 보통 소문자로 작성 중인데 클래스 이름, 메소드 명은 그대로 대문자로 적어도 되는건가?’, ‘자바 메소드의 위치 순서는 어떻게 하는게 좋을까?’, ’ Junit 테스트에서 public을 붙이는게 좋은가?’와 같은 고민입니다.
이런 고민들 중 가장 기억에 남는 고민이 있었습니다. ‘왜 자꾸 예외처리를 따로 해 주어야하는 느낌이지?’라는 고민입니다. payment와 bonus라는 Integer 변수는 모든 정수가 들어갈 수 있어서 예외처리를 해주어야 한다는 압박감이 있었습니다. 이게 고민이었습니다. 후에 찾아보니 원시값 포장과 일급 컬렉션이라는 개념이 있었습니다. 현재 미션에서 Lotto 컬렉션에 제약조건을 달아둔 것도 일급 컬렉션의 제약조건이라는 사실도 알게 되었습니다. 이런 점에서 저의 고민들이 다른 사람들이 이미 많은 고민을 하고 해결책을 제시했다는 사실을 알게 되었습니다. 혼자 고민을 해보는 것도 좋지만 검색을 통해 습득하는 능력이 중요하겠다고 생각하였습니다.

미션에 개념을 적용을 하고 나서 코드를 보니 첫 주차에 비해 엄청 성장한 것이 느껴졌습니다. 특히 가독성, 에러 처리면에서 성장이 느껴졌습니다. 다음 주차에도 피드백과 새로운 요구사항을 적용시키며 성장하고 싶은 마음입니다. 다음 미션도 기대가 됩니다!

