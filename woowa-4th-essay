우테코 4주차 소감문

이번 주차에는 ‘객체에게 일을 시키기’, ‘테스트 하기 쉬운 코드로의 변경’, ‘원시 값 포장’ 개념이 인상 깊었습니다. 또한 저 스스로의 고민들로 성장할 수 있었습니다.

공통 피드백으로 getter를 사용하는 대신 ‘객체에게 일 시키기’ 개념을 알게 되었습니다. 처음에는 간단하다고 생각하였습니다. 그러나 코드를 작성하며 문제점이 발생하였습니다. 
getter를 전혀 사용하지 않고 코드를 짜야 한다고 생각했습니다. 그 결과 view에 값을 넘기거나 원시 값 포장된 내용을 꺼내는 데에 문제가 발생했습니다. 
getter를 아예 사용하지 말라는 내용이 아니었음을 깨닫고 이를 고치게 되었습니다. 이를 계기로 관련된 공부를 더 하게 되었습니다. 
공부를 진행한 블로그에서 연관되는 주제로 디미터의 법칙이 있었습니다. 그를 통해 getter를 사용하지 않고 객체에게 일을 시켰을 때 효과에 대해 더욱 이해할 수 있게 되었습니다. 
또한 이를 프로젝트에 적용시켜 보았습니다. getter로 여러 번 호출할 필요가 없어졌습니다. 메서드 하나로 해결되니 가독성이 높아졌습니다. 편리함도 증대되었습니다. 
또한 연관되는 주제로 collections을 getter로 받아올 때 immutable로 변환하고 반환하는 방식도 알게 되었습니다. 이렇게 연관되는 주제를 찾아보고 미션에 적용해 보았습니다.

두번째로 ‘테스트 하기 쉬운 코드로의 변경’ 개념이 인상 깊었습니다. 저번 racing car 미션때에 랜덤 값에 대한 테스트가 쉽지 않았습니다. 
그때 개념을 찾아보긴 했는데 이번에 더욱 깊게 공부할 수 있는 기회가 되었습니다. 처음에는 매개변수로 받는 방식, 테스트 하기 어려운 부분을 상위 계층으로 넘기는 방식을 알게 되었습니다. 
그 다음 인터페이스를 이용한 방법이 있다는 것을 알게 되었습니다. 두 케이스는 시그니처를 변경해야 한다는 단점이 있었습니다. 그를 보안한 방법으로 상속을 이용한 방법이 있다는 것을 알게 되었습니다. 
그를 또 공부해 보았습니다. 학습을 하고 미션에 적용해 보았습니다. 적용을 해보니 경계 값 테스트가 자유롭다는 장점이 있었습니다. 공통 피드백에 경계 값에 대해 테스트를 해보는 것이 중요하다고 나와있었습니다. 
이를 적용해 보는 계기도 되었습니다. 

세번째로 원시 값 포장입니다. 로또 미션에서 원시 값으로 bonus 번호를 관리하게 되어 불편했던 경험이 있었습니다. 
이를 통해 찾아보고 원시 값 포장에 대한 개념을 알게 되었습니다. 
이를 이번 미션에 적용해 보았습니다. 처음에는 포장을 하니 여러 클래스가 필요했고 불편했습니다. 장점은 후에 나타났습니다. 그 클래스를 사용하기만 하면 자동으로 검증이 되었습니다. 후에 검증을 신경 쓸 필요가 없었습니다. 또한 포장 값과 관련된 메서드를 만들 수도 있어 사용하기가 간편했습니다. 

다른 점들도 배울 점이 많았습니다. 세세한 부분도 따로 궁금해서 검색하고 공부해 보았습니다. 
예를 들어 ‘static import는 하는 것이 좋은 것인가?’, ‘원시 값 포장한 필드의 명은 어떻게 하는 것이 좋은가?’, 또한 ‘그를 꺼내는 getter는 어떻게 메서드 명을 정할까?’, 
또한 git commit convention을 다시 공부하다가 template 설정에 대해서도 알게 되었습니다.

이번에는 생각할 것이 많아 배울 점이 많은 미션이었습니다! 저 혼자 검색해보고 적용해본 터라 다른 사람들은 어떻게 구현했는지 궁금하고 그를 통해 성장하고 싶은 마음입니다.

