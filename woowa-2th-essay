우테코 2주차 소감문

이번 주차에는 크게 단위 테스트, 커밋 메세지 컨벤션, 두 부분에서 배운 점이 많았습니다.

우선 단위 테스트의 경우에는 콘솔 입,출력까지 테스트로 작성하려고 하였습니다. 테스트를 하나씩 실행하면 통과가 되지만 한번에 실행하면 오류가 발생하였습니다. 처음에는 검색을 통해 해결하려고 하였습니다. 검색결과대로 System.in 값을 원상복구 시켜주었지만 해결이 되지 않았습니다. readLine() 메소드를 사용한다는 사실을 인지하고 Console 클래스를 분석해 보았습니다. 이해가 되지 않아 System에 대해서 구글링을 통해 찾아보고 공부를 하게 되었습니다. 그 결과 Console 클래스를 이해하게 되고 close 메소드를 적용하면 된다는 것을 알게 되었습니다. 두번째로 테스트를 작성하면서 뭔가 잘못 작성하고 있다는 생각이 들었습니다. ‘출력을 하나하나 테스트를 해보는게 맞나?’ ‘이런 세세한 기능을 테스트하는게 맞나?’ 라는 의문입니다. 검색을 해보니 모두 테스트를 할 필요는 없고 도메인 주도 개발로 도메인에 핵심 메서드 들만 테스트해보는 방식이 있다고 하였습니다. 또한 데이터 베이스 CRUD나 화면 출력 같은 부분은 따로 테스트로 적지 않는다는 의견도 있었습니다. 너무 모든 메서드에 테스트를 적용시키려고 하지 않아도 되겠다는 생각을 하였습니다. 마지막으로 Random 관련 테스트입니다. 저의 기능은 값이 동적이어서 테스트하기가 어렵다는 생각을 했습니다. 이 경우에도 Mock이라는 개념을 알게 되었고 랜덤 값을 따로 인자로 빼서 테스트를 용이하게 하는 방법이 있다는 것도 알게 되었습니다. 테스트 코드에서 활용하기 위해 생성자를 이용하는 방법과 인터페이스를 적용해서 테스트 전용 클래스를 만드는 방법도 있다는 것도 공부하게 되었습니다. 

커밋 메시지 컨벤션은 다음과 같이 공부하게 되었습니다. 우선 구글링으로 컨벤션을 공부하게 되었습니다. 그런데 사람들마다 의견이 다른 문제가 발생하였습니다. Subject 부분에 소문자로 시작해야 한다는 의견과 대문자로 시작해야 한다는 의견입니다. 이 의견 말고도 다른 부분에서도 충돌이 일어났습니다. 저는 신뢰성이 있는 공식문서를 보면 되겠다는 생각을 하였습니다. 하지만 공식문서가 보이지 않아 그래도 공신력이 있는 유다시티라는 미국 영리 교육 기관의 예시를 보았습니다. 그곳에서는 대문자로 subject를 시작하였습니다. 그대로 적용하려고 하였는데 우테코의 첫 커밋 메세지를 보니 subject 부분이 소문자로 시작하였습니다. 저는 개발하는 사람들끼리 맞추면 되는 문제라고 결론지었습니다. 우테코 첫 커밋이 소문자로 시작하니 저도 소문자로 해야겠다고 생각하였습니다. 또한 예전에 깃 브랜치 전략이라는 개념을 배운 적이 있어서 또 의문점이 생겨났습니다. ‘브랜치 이름이 feature면 무조건 커밋 메세지는 feat으로 시작할텐데 중복이 아닌가?’ 라는 의문점이 들어 찾아보았습니다. 브랜치는 큰 개념이고 그 안에서 커밋 메세지가 이루어지므로 feature 브랜치에서 feat, docs 등 여러가지가 쓰일 수 있다는 것을 이해했습니다. 이렇게 개념을 공부할 때 궁금점이 계속 생각나게 되는데 그것을 따라가며 공부하였습니다.

이 두 부분 말고도 많은 점을 알게 되었습니다. 예를 들어 역할의 분리, 다양한 깃 명령어들, 공통 피드백 문서 및 강의 등 입니다.

단순한 게임이라고 생각했는데 다양한 개념들을 이런 게임 하나로 배울 수 있다는 점이 너무 신기했습니다. 미션이 끝날 때마다 ‘아! 이런 식으로 구현했으면 더 좋았을텐데’ 라는 생각이 들었습니다. 이런 깨달음을 다음 미션에 적용해보고 후에 프리코스를 한번 더 풀어보며 적용해 봐야겠다는 생각을 하였습니다. 좋은 배움이었고 다음에 있을 미션이 기대가 됩니다!

